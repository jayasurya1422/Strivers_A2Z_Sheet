Better Solution :

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        HashSet<List<Integer>> h1=new HashSet<>();
        for(int i=0;i<nums.length;i++){
            HashSet<Integer> h=new HashSet<>();
            for(int j=i+1;j<nums.length;j++){
                int third=-(nums[i]+nums[j]);
                if(h.contains(third)){
                    List<Integer> ar=Arrays.asList(nums[i],nums[j],third);
                    Collections.sort(ar);
                    h1.add(ar);
                }
                else{
                    h.add(nums[j]);
                }
            }
        }
        List<List<Integer>> l=new ArrayList<>(h1);
        return l;
  }
}

Optimal - 

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
      List<List<Integer>> l=new ArrayList<>();
              Arrays.sort(nums);
              for(int i=0;i<nums.length;i++){
                  if(i>0 && nums[i]==nums[i-1]) continue;
                  int j=i+1;
                  int k=nums.length-1;
                  while(j<k){
                      int sum=nums[i]+nums[j]+nums[k];
                      if(sum<0){
                          j+=1;
                      }
                      else if(sum>0){
                          k-=1;
                      }
                      else{
                          List<Integer> temp=Arrays.asList(nums[i],nums[j],nums[k]);
                          l.add(temp);
                          j++;
                          k--;
                          while(j<k && nums[j]==nums[j-1]) j++;
                          while(j<k && nums[k]==nums[k+1]) k--;
                      }
                  }
              } 
              return l;
  }
}

TC - O(nlogn)+O(n^2)
SC - O(no.of triplets)



Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
