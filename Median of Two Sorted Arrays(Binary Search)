class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n=nums1.length+nums2.length;
        int ind1=n/2;
        int ind2=n/2-1,i=0,j=0,cnt=0;
        int ind1ele=0,ind2ele=0;
        while(i<nums1.length && j<nums2.length){
            if(nums1[i]<=nums2[j]){
                if(cnt==ind1) ind1ele=nums1[i];
                if(cnt==ind2) ind2ele=nums1[i];
                cnt+=1;
                i+=1;
                
            }
            else{
                if(cnt==ind1) ind1ele=nums2[j];
                if(cnt==ind2) ind2ele=nums2[j];
                cnt+=1;
                j+=1;
            }
        }
        while(i<nums1.length){
            if(cnt==ind1) ind1ele=nums1[i];
                if(cnt==ind2) ind2ele=nums1[i];
                i+=1;
                cnt+=1;
        }
        while(j<nums2.length){
            if(cnt==ind1) ind1ele=nums2[j];
                if(cnt==ind2) ind2ele=nums2[j];
                j+=1;
                cnt+=1;
        }
        if(n%2==1){
            return (double)ind1ele;
        }
        else{
            return (double)((double)(ind1ele + ind2ele))/2.0;
        }
    }
}



Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
